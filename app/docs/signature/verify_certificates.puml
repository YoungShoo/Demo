@startuml
skinparam monochrome true
skinparam style strictuml
hide footbox

participant "PackageManagerService" as PMS
participant "PackageParser" as PP
participant "StrictJarFile" as SJF
participant "StrictJarVerifier" as SV
participant "JarFileInputStream" as JFIS
participant "StrictJarVerifier.VerifierEntry" as VE

PMS -> PMS: installPackageLI
activate PMS
PMS -> PP: collectCertificates
activate PP

create SJF
PP -> SJF: new
activate SJF

create SV
SJF -> SV: new

SJF -> SV: readCertificates
activate SV
SV -> SV: verifyCertificate
activate SV

SV -> SV: verifyBytes
activate SV
note right
    1. Verifies that the signature computed from
       .SF matches that specified in .DSA/.RSA/.EC
end note
deactivate SV

SV -> SV
activate SV
note right
    2.1 Verify manifest hash in .sf file
    2.2 Use .SF to verify the mainAttributes of the manifest
    2.3 Use .SF to verify the whole manifest
end note
deactivate SV

deactivate SV
deactivate SV

deactivate SJF

loop entry:ZipEntry
    PP -> PP: loadCertificates
    activate PP

    PP -> SJF: getInputStream
    activate SJF
    create VE
    SJF -> VE: new

    create JFIS
    SJF -> JFIS: new

    SJF -->> PP: is:JarFileInputStream
    deactivate SJF

    PP -> PP: readFullyIgnoringContents(is)
    activate PP

    PP -> JFIS: read
    activate JFIS

    JFIS -> VE: write
    activate VE
    deactivate VE

    JFIS -> VE: verify
    activate VE
    note right
        3. Verifies that the digests stored in the manifest
           match the decrypted digests from the .SF file.
        if (MessageDigest.isEqual(digest, Base64.decode(hash))
            verifiedEntries.put(name, certChains)
    end note
    deactivate VE

    deactivate JFIS

    deactivate PP

    PP -> SJF: getCertificateChains
    activate SJF
    SJF -->> PP: verifiedEntries.get(name)
    deactivate SJF

    deactivate PP

end

deactivate PP
deactivate PMS

@enduml